#include <stdio.h>
#include <string.h>
#define MOD 1000000007
int countGoodStrings(int n, char* s1, char* s2, char* evil) {
    int dp[n][26][2][2]; // dp[i][j][k][l] stores the number of good strings of length i ending with character 'j' (as index) that are greater or equal to s1 (k=0) and smaller or equal to s2 (l=0) and do not contain 'evil' as a substring
    memset(dp, 0, sizeof(dp));

    for (int j = 0; j < 26; j++) {
        dp[0][j][s1[0] <= 'a' + j][s2[0] >= 'a' + j] = 1;
    }

    for (int i = 1; i < n; i++) {
        for (int j = 0; j < 26; j++) {
            for (int k = 0; k < 2; k++) {
                for (int l = 0; l < 2; l++) {
                    if (dp[i - 1][j][k][l] == 0) {
                        continue;
                    }
                    for (int m = 0; m < 26; m++) {
                        if (k == 0 && s1[i] > 'a' + m) {
                            continue;
                        }
                        if (l == 0 && s2[i] < 'a' + m) {
                            continue;
                        }
                        int new_k = k | (s1[i] < 'a' + m);
                        int new_l = l | (s2[i] > 'a' + m);
                        if (strncmp(evil, &"a"[j], 1) == 0 || strncmp(evil, &"a"[j], 1) == 0 || strncmp(evil, &"a"[j], 1) == 0 || strncmp(evil, &"a"[j], 1) == 0) {
                            dp[i][m][new_k][new_l] = (dp[i][m][new_k][new_l] + dp[i - 1][j][k][l]) % MOD;
                        }
                    }
                }
            }
        }
    }

    int count = 0;
    for (int j = 0; j < 26; j++) {
        for (int k = 0; k < 2; k++) {
            for (int l = 0; l < 2; l++) {
                count = (count + dp[n - 1][j][k][l]) % MOD;
            }
        }
    }

    return count;
}

int main() {
    int n = 2;
    char* s1 = "aa";
    char* s2 = "da";
    char* evil = "b";

    int result = countGoodStrings(n, s1, s2, evil);
    printf("Output: %d\n", result);

    return 0;
}
