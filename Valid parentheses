#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Stack {
    int top;
    unsigned capacity;
    char* array;
};
struct Stack* createStack(unsigned capacity) {
    struct Stack* stack = (struct Stack*) malloc(sizeof(struct Stack));
    stack->capacity = capacity;
    stack->top = -1;
    stack->array = (char*) malloc(stack->capacity * sizeof(char));
    return stack;
}
int isFull(struct Stack* stack) {
    return stack->top == stack->capacity - 1;
}
int isEmpty(struct Stack* stack) {
    return stack->top == -1;
}
void push(struct Stack* stack, char item) {
    if (isFull(stack))
        return;
    stack->array[++stack->top] = item;
}
char pop(struct Stack* stack) {
    if (isEmpty(stack))
        return '\0';
    return stack->array[stack->top--];
}
char peek(struct Stack* stack) {
    if (isEmpty(stack))
        return '\0';
    return stack->array[stack->top];
}
int isOpeningBracket(char ch) {
    return ch == '(' || ch == '{' || ch == '[';
}
int isClosingBracket(char ch) {
    return ch == ')' || ch == '}' || ch == ']';
}
int isMatchingPair(char opening, char closing) {
    return (opening == '(' && closing == ')') ||
           (opening == '{' && closing == '}') ||
           (opening == '[' && closing == ']');
}
int isValid(char* s) {
    int length = strlen(s);
    struct Stack* stack = createStack(length);

    for (int i = 0; i < length; i++) {
        if (isOpeningBracket(s[i])) {
            push(stack, s[i]);
        } else if (isClosingBracket(s[i])) {
            if (isEmpty(stack) || !isMatchingPair(pop(stack), s[i])) {
                free(stack->array);
                free(stack);
                return 0;
            }
        }
    }

    int valid = isEmpty(stack);
    free(stack->array);
    free(stack);
    return valid;
}

int main() {
    char str[] = "{[()]}";
    if (isValid(str))
        printf("The string is valid.\n");
    else
        printf("The string is not valid.\n");
    return 0;
}
