#include <stdio.h>
#include <stdlib.h>
struct ListNode {
    int val;
    struct ListNode *next;
};
struct ListNode* newNode(int val) {
    struct ListNode* node = (struct ListNode*)malloc(sizeof(struct ListNode));
    node->val = val;
    node->next = NULL;
    return node;
}
struct ListNode* reverseList(struct ListNode* head) {
    struct ListNode* prev = NULL;
    struct ListNode* current = head;
    struct ListNode* next = NULL;
    
    while (current != NULL) {
        next = current->next;
        current->next = prev;
        prev = current;
        current = next;
    }
    
    return prev;
}
struct ListNode* removeNodes(struct ListNode* head) {
    if (!head) return NULL;
    
    head = reverseList(head); // Reverse the list
    struct ListNode* newHead = NULL;
    struct ListNode* maxNode = NULL;
    
    while (head) {
        if (!maxNode || head->val >= maxNode->val) {
            struct ListNode* temp = newNode(head->val);
            temp->next = newHead;
            newHead = temp;
            maxNode = head;
        }
        head = head->next;
    }
    
    return newHead;
}
void printList(struct ListNode* head) {
    while (head != NULL) {
        printf("%d ", head->val);
        head = head->next;
    }
    printf("\n");
}

int main() {

    struct ListNode* head1 = newNode(5);
    head1->next = newNode(2);
    head1->next->next = newNode(13);
    head1->next->next->next = newNode(3);
    head1->next->next->next->next = newNode(8);

    head1 = removeNodes(head1);
    printf("Output: ");
    printList(head1);

    struct ListNode* head2 = newNode(1);
    head2->next = newNode(1);
    head2->next->next = newNode(1);
    head2->next->next->next = newNode(1);

    head2 = removeNodes(head2);
    printf("Output: ");
    printList(head2);

    return 0;
}
