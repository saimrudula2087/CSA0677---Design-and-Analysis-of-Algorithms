#include <stdio.h>
#include <stdlib.h>

#define MAX_NODES 1000

int values[MAX_NODES];
int tree[MAX_NODES][MAX_NODES];
int subtree_values[MAX_NODES];
int n;

void dfs(int node, int parent) {
    subtree_values[node] = values[node];
    for (int i = 0; i < n; i++) {
        if (tree[node][i] && i != parent) {
            dfs(i, node);
            subtree_values[node] += subtree_values[i];
        }
    }
}

int findMaxScore() {
    int max_score = 0;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            if (i != j) {
                int score = subtree_values[i] ^ subtree_values[j];
                max_score = (score > max_score) ? score : max_score;
            }
        }
    }
    return max_score;
}

int main() {
    n = 6;
    int edges[5][2] = {{0, 1}, {0, 2}, {1, 3}, {1, 4}, {2, 5}};
    int input_values[6] = {2, 8, 3, 6, 2, 5};

    for (int i = 0; i < n; i++) {
        values[i] = input_values[i];
    }

    for (int i = 0; i < n - 1; i++) {
        int a = edges[i][0];
        int b = edges[i][1];
        tree[a][b] = 1;
        tree[b][a] = 1;
    }

    dfs(0, -1);
    int max_score = findMaxScore();

    printf("Maximum possible score: %d\n", max_score);

    return 0;
}
