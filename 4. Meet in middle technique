#include <stdio.h>
#include <stdlib.h>
#include <math.h>
void subsetSums(int arr[], int n, int sums[], int* size) {
    int total = 1 << n;
    for (int i = 0; i < total; i++) {
        int sum = 0;
        for (int j = 0; j < n; j++)
            if (i & (1 << j))
                sum += arr[j];
        sums[(*size)++] = sum;
    }
}

int compare(const void* a, const void* b) {
    return (*(int*)a - *(int*)b);
}

int meetInMiddle(int arr[], int n, int target) {
    int size1 = n / 2;
    int size2 = n - size1;
    int *X = (int*)malloc((1 << size1) * sizeof(int));
    int *Y = (int*)malloc((1 << size2) * sizeof(int));
    int sizeX = 0, sizeY = 0;

    subsetSums(arr, size1, X, &sizeX);
    subsetSums(arr + size1, size2, Y, &sizeY);

    qsort(Y, sizeY, sizeof(int), compare);

    for (int i = 0; i < sizeX; i++) {
        if (bsearch(&target, Y, sizeY, sizeof(int), compare))
            return 1;
    }

    free(X);
    free(Y);
    return 0;
}

int main() {
    int arr[] = {3, 34, 4, 12, 5, 2};
    int n = sizeof(arr) / sizeof(arr[0]);
    int target = 9;

    if (meetInMiddle(arr, n, target))
        printf("Found a subset with given sum\n");
    else
        printf("No subset with given sum\n");

    return 0;
}
